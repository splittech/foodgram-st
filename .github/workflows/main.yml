name: Main workflow
# Почти полностью взято из теории курса яндекса.

on:
  push:
    branches:
      - main

jobs:
  checkout-and-print-tree:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Print project tree
        run: tree .
        
  linter:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    needs: checkout-and-print-tree
    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v4
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v5
    # В action setup-python передаём параметр — версию Python
      with:
        python-version: "3.10"
    # Обновляем pip, устанавливаем ruff
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install ruff==0.8.0
    # Запускаем ruff
    - name: Lint with ruff
      # Вызываем ruff и указываем ему,
      # что нужно проверить файлы только в папке backend/
      run: python -m ruff check backend/
      
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v3
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v5
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  restart_containers:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: Run command on remote server
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}}
          user: ${{secrets.SSH_USER}}
          private_key: ${{secrets.SSH_PRIVATE_KEY}}
          command: |
            echo '--- START WORK ON REMOTE SERVER ---';
            cd foodgram-st/infra;
            echo '--- LIST OF FILES ---';
            ls -al;
            echo '--- GIT INFORMATION ---'
            git co dev;
            git pull;
            echo '--- DOCKER OPERATIONS ---';
            docker compose down;
            echo '--- LIST OF DOCKER CONTAINERS AFTER STOPING DOCKER CONTAINERS ---';
            docker ps;
            docker compose up -d --build;
            echo '--- LIST OF DOCKER CONTAINERS AFTER STARTING DOCKER CONTAINERS ---';
            docker ps;
